{"version":3,"sources":["../../../api/server/services/BookService.js"],"names":["BookService","db","Book","findAll","console","log","id","findOne","where","Number","theBook","newBook","create","updateBook","bookToUpdate","update","bookToDelete","destroy","deletedBook"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;;;;;;;;;;uBAGaC,mBAAGC,IAAH,CAAQC,OAAR,E;;;;;;;;AAEbC,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;;;;qDAKkBC,E;;;;;;;;uBAEIL,mBAAGC,IAAH,CAAQK,OAAR,CAAgB;AACpCC,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAZ;AAD6B,iBAAhB,C;;;AAAhBI,gBAAAA,O;kDAICA,O;;;;;AAEPN,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;;;;qDAKiBM,O;;;;;;;uBAEJV,mBAAGC,IAAH,CAAQU,MAAR,CAAeD,OAAf,C;;;;;;;;AAEbP,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;;;;qDAKoBC,E,EAAIO,W;;;;;;;;uBAEGZ,mBAAGC,IAAH,CAAQK,OAAR,CAAgB;AACzCC,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAZ;AADkC,iBAAhB,C;;;AAArBQ,gBAAAA,Y;;qBAIFA,Y;;;;;;uBACIb,mBAAGC,IAAH,CAAQa,MAAR,CAAeF,WAAf,EAA2B;AAAEL,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAZ;AAAT,iBAA3B,C;;;kDAECO,W;;;kDAEF,I;;;;;AAEPT,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;;;;qDAMoBC,E;;;;;;;;uBAEOL,mBAAGC,IAAH,CAAQK,OAAR,CAAgB;AAAEC,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAZ;AAAT,iBAAhB,C;;;AAArBU,gBAAAA,Y;;qBAEFA,Y;;;;;;uBACwBf,mBAAGC,IAAH,CAAQe,OAAR,CAAgB;AACxCT,kBAAAA,KAAK,EAAE;AAAEF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAZ;AADiC,iBAAhB,C;;;AAApBY,gBAAAA,W;kDAGCA,W;;;kDAEF,I;;;;;AAEPd,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;;;eAMSL,W","sourcesContent":["import db from '../src/models';\n\nclass BookService {\n  static async getAllBooks() {\n    try {\n      return await db.Book.findAll();\n    } catch (e) {\n      console.log(e);\n      throw e;\n    }\n  }\n\n  static async getABook(id) {\n    try {\n      const theBook = await db.Book.findOne({\n        where: { id: Number(id) }\n      });\n\n      return theBook;\n    } catch (e) {\n      console.log(e);\n      throw e;\n    }\n  }\n\n  static async addBook(newBook) {\n    try {\n      return await db.Book.create(newBook);\n    } catch (e) {\n      console.log(e);\n      throw e;\n    }\n  }\n\n  static async updateBook(id, updateBook) {\n    try {\n      const bookToUpdate = await db.Book.findOne({\n        where: { id: Number(id) }\n      });\n\n      if (bookToUpdate) {\n        await db.Book.update(updateBook, { where: { id: Number(id) } });\n\n        return updateBook;\n      }\n      return null;\n    } catch (e) {\n      console.log(e);\n      throw e;\n    }\n  }\n\n\n  static async deleteBook(id) {\n    try {\n      const bookToDelete = await db.Book.findOne({ where: { id: Number(id) } });\n\n      if (bookToDelete) {\n        const deletedBook = await db.Book.destroy({\n          where: { id: Number(id) }\n        });\n        return deletedBook;\n      }\n      return null;\n    } catch (e) {\n      console.log(e);\n      throw e;\n    }\n  }\n}\n\nexport default BookService;\n"],"file":"BookService.js"}